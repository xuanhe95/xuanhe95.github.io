<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XANDER&#39;s Studio</title>
  
  <subtitle>Xander Studio</subtitle>
  <link href="https://xuanhe95.github.io/atom.xml" rel="self"/>
  
  <link href="https://xuanhe95.github.io/"/>
  <updated>2022-11-21T01:22:09.027Z</updated>
  <id>https://xuanhe95.github.io/</id>
  
  <author>
    <name>Xuanhe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Math 33 Review</title>
    <link href="https://xuanhe95.github.io/2022/11/20/Math-33-Review/"/>
    <id>https://xuanhe95.github.io/2022/11/20/Math-33-Review/</id>
    <published>2022-11-20T21:41:00.000Z</published>
    <updated>2022-11-21T01:22:09.027Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Homework-1"><a href="#Homework-1" class="headerlink" title="Homework 1:"></a>Homework 1:</h3><ul><li><strong>增广矩阵 Augmented matrix：</strong><ul><li>sovling system equations</li></ul></li><li><strong>简化行阶梯形 Reduced Row Echelon Form</strong></li></ul><h3 id="Homework-2"><a href="#Homework-2" class="headerlink" title="Homework 2:"></a>Homework 2:</h3><ul><li><strong>秩 Rank</strong></li><li><strong>自由元 Free variable：</strong> finding all possible numbers for variables</li><li><strong>线性变换 Linear transformation：</strong> determining weather a function is linear<ul><li>线性变换判断方法：<ul><li>if v and w belongs R</li><li>T(v + w) &#x3D; T(v) + T(w)</li><li>T(v) &#x3D; aT(v)</li></ul></li></ul></li></ul><h3 id="Homework-3"><a href="#Homework-3" class="headerlink" title="Homework 3:"></a>Homework 3:</h3><ul><li><p><strong>变换矩阵 Transformation matrix：</strong></p><ul><li>finding the matrix of linear transformation (<strong>M</strong>)</li></ul></li><li><p><strong>矩阵乘法 Matrix multiplication：</strong></p></li><li><p><strong>子空间 Subspace:</strong></p><ul><li>子空间判断方法与判断矩阵是否是linear相近：<ul><li>if v and w belong to S</li><li>then (v + w) belongs to S</li><li>and (a * v) belongs to S</li></ul></li></ul></li><li><p><strong>线性生成空间 Span:</strong><br>判定vector w是否在span中：</p><ul><li>could we find <strong>a*v1 + b*v2 + … +n*vn &#x3D; w in span{v1…vn}</strong></li><li>using <strong>augemented matrix</strong> to solve the problem</li></ul></li></ul><h3 id="Homework-4"><a href="#Homework-4" class="headerlink" title="Homework 4:"></a>Homework 4:</h3><ul><li><p><strong>线形独立 linearly independent：</strong></p><ul><li>determining weather a matrix M is <strong>linearly independent</strong></li></ul></li><li><p><strong>核 Kernal：</strong></p><ul><li>kernal(M) -&gt; sending all vectors to 0</li></ul></li><li><p><strong>象 Image</strong></p><ul><li>image(M) -&gt; equivalent to the span of the columns of M</li></ul></li><li><p><strong>逆 Inverse</strong> Inverse(M): M^-1 -&gt; [M^-1][M][A], A不变</p><ul><li><p>determining whether a matrix M is <strong>invertible</strong>:</p><ul><li>full rank</li><li>det(M) !&#x3D; 0</li></ul></li><li><p>Calculating the invert matrix:</p><ul><li>高斯消元法</li></ul></li></ul></li><li><p><strong>finding basis</strong></p></li></ul><h3 id="Homework-5"><a href="#Homework-5" class="headerlink" title="Homework 5:"></a>Homework 5:</h3><ul><li><p>finding image(T) &#x3D; span(v1, v2, ….vn):</p><ul><li>image(T) &#x3D; span{col(T)} -&gt; col(T) &#x3D; {v1, v2, …vn}</li></ul></li><li><p><strong>基 Basis</strong> :</p></li><li><p>standard basis：</p></li><li><p>finding w that <strong>perpendicular</strong> to vectors span{v1 … vn}:</p><ul><li>(v1 · w) &#x3D; 0, (v2 · w) &#x3D; 0, …  (vn · w) &#x3D; 0</li></ul></li><li><p><strong>在以B为坐标系中表示向量w：</strong></p><ul><li>分解 -&gt; 找到factors -&gt; 将factors组成一个新的col向量</li></ul></li><li><p><strong>另一个坐标系B下的线性变换矩阵 B-matrix</strong>：</p></li><li><p>find the matrix of the linear transformation defined by T(v) &#x3D; w with respect to the basis {b1, b2, … bn}:</p><ul><li>将bn带入T()，得到变化后的wn</li><li>分解wn为aw1 + bw2 + … + nwn</li><li>将factors的解组成一个新的col向量</li><li>B-matrix &#x3D; [col1, col2, … coln]</li></ul></li><li><p><strong>let T: R3 -&gt; R3 be the orthogonal projection onto the line spanned by [1 1 1]. Find a basis for which this projection matrix is diagonal</strong></p></li></ul><h3 id="Homework-6"><a href="#Homework-6" class="headerlink" title="Homework 6:"></a>Homework 6:</h3><ul><li>Orthonormal 标准正交基：<ul><li>所有基向量模长为1</li><li>所有基向量两两正交</li></ul></li><li>Projection 投影:<ul><li>投影公式：<strong>proj<sub>span{u, v}</sub><sup>w</sup> &#x3D; proj<sub>u</sub><sup>w</sup> + proj<sub>v</sub><sup>w</sup></strong></li><li><strong>proj<sub>v</sub><sup>w</sup> &#x3D; [(u · v)&#x2F;(v · v)]v</strong></li></ul></li><li>QR factorization (Gram–Schmidt process):<ul><li>首先将第一个向量w<sub>1</sub>单位化<ul><li><strong>v &#x3D; w<sub>1</sub> &#x2F; ||w<sub>1</sub>||</strong> (第一个向量v等于第一个原有向量w<sub>1</sub>除以其模长)</li></ul></li><li>然后将第二个向量w<sub>2</sub>标准正交化：<ul><li><strong>u &#x3D; (w<sub>2</sub> - proj<sub>v</sub><sup>w<sub>2</sub></sup>) &#x2F; ||(w<sub>2</sub> - proj<sub>v</sub><sup>w<sub>2</sub></sup>)||</strong></li><li>（第二个向量u等于第二个原有向量w<sub>2</sub>减去w<sub>2</sub>在向量v上的投影除以其模长）</li><li>最后将第三个向量w<sub>3</sub>标准正交化：</li><li><ul><li><strong>t &#x3D; (w<sub>3</sub> - proj<sub>span{v, u}</sub><sup>w<sub>3</sub></sup>) &#x2F; ||(w<sub>3</sub> - proj<sub>span{v, u}</sub><sup>w<sub>3</sub></sup>)||</strong></li></ul></li><li>（第三个向量u等于第三个原有向量w<sub>3</sub>减去w<sub>3</sub>在平面span{v, u}上的投影除以其模长）</li></ul></li></ul></li><li>orthogonal 正交：<ul><li>矩阵A是否正交判断：<strong>A<sup>T</sup> &#x3D; A<sup>-1</sup></strong></li></ul></li></ul><h3 id="Homework-7"><a href="#Homework-7" class="headerlink" title="Homework 7:"></a>Homework 7:</h3><ul><li><strong>find a basis for the subspace V<sup>⊥</sup></strong>:</li><li>find <strong>least-squares solution x</strong>* （最小平方解）  of the system:<ul><li>A<sup>T</sup>Ax* &#x3D; A<sup>T</sup>b</li></ul></li><li><strong>行列式 det(M):</strong><ul><li>如果M将原有空间volume放大n倍，则det(M) &#x3D; n</li><li>如果det(M) &#x3D; 0，则原有空间被降维，因此此时不可逆</li></ul></li></ul><h3 id="Homework-8"><a href="#Homework-8" class="headerlink" title="Homework 8:"></a>Homework 8:</h3><ul><li><p><strong>行列式计算技巧：</strong></p><ul><li>det(M) &#x3D; RREF后的对角线的值相乘</li><li>det(M) &#x3D; 0, if M linearly depandent</li><li>det(M) &#x3D; det(M<sup>T</sup>)</li></ul></li><li><p><strong>初等变换 Elementary transformation</strong>：</p><ul><li>当某一行row加到另一行row2时，行列式不变：det(M’) &#x3D; det(M)</li><li>当某一行row被放大n倍时，行列式放大n倍: det(M’) &#x3D; n * det(M)</li><li>当交换两个row时，行列式取负值：det(M’) &#x3D; -det(M)</li><li></li></ul></li><li><p><strong>特征值 Eigenvalues λ 与特征向量 Eigenvector：</strong></p></li><li><p>在M对原有空间进行线性变换时，存在一些向量（特征向量）只发生了倍数变换（Mv &#x3D; λv）。</p></li><li><p>求解特征值：det(M-λI) &#x3D; 0</p></li><li><p>特征值可以为0，但特征向量不能为0</p></li><li><p>不可逆方程必有特征值0</p></li><li><p><strong>平行六面体 Parallelepiped的volume计算</strong>:</p><ul><li>将基向量变换到对应的顶点坐标，得到变换矩阵T</li><li>计算|det(T)|</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Homework-1&quot;&gt;&lt;a href=&quot;#Homework-1&quot; class=&quot;headerlink&quot; title=&quot;Homework 1:&quot;&gt;&lt;/a&gt;Homework 1:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;增广矩阵 Augmented matrix：</summary>
      
    
    
    
    <category term="Math" scheme="https://xuanhe95.github.io/categories/Math/"/>
    
    
    <category term="Math" scheme="https://xuanhe95.github.io/tags/Math/"/>
    
    <category term=" Linear Algebra" scheme="https://xuanhe95.github.io/tags/Linear-Algebra/"/>
    
  </entry>
  
  <entry>
    <title>26. Remove Duplicates from Sorted Array</title>
    <link href="https://xuanhe95.github.io/2022/11/11/26-Remove-Duplicates-from-Sorted-Array/"/>
    <id>https://xuanhe95.github.io/2022/11/11/26-Remove-Duplicates-from-Sorted-Array/</id>
    <published>2022-11-11T20:32:03.000Z</published>
    <updated>2022-11-11T20:32:23.067Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>Given an integer array <code>nums</code> sorted in <strong>non-decreasing order</strong>, remove the duplicates <a href="https://en.wikipedia.org/wiki/In-place_algorithm"><strong>in-place</strong></a> such that each unique element appears only <strong>once</strong>. The <strong>relative order</strong> of the elements should be kept the <strong>same</strong>.</p><p>Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the <strong>first part</strong> of the array <code>nums</code>. More formally, if there are <code>k</code> elements after removing the duplicates, then the first <code>k</code> elements of <code>nums</code> should hold the final result. It does not matter what you leave beyond the first <code>k</code> elements.</p><p>Return <code>k</code>* after placing the final result in the first <em><code>k</code></em> slots of *<code>nums</code>.</p><p>Do <strong>not</strong> allocate extra space for another array. You must do this by <strong>modifying the input array <a href="https://en.wikipedia.org/wiki/In-place_algorithm">in-place</a></strong> with O(1) extra memory.</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>由于数组本身已经排序，只要比较当前nums中的元素是否大于上一个保存的数值就可以决定是否保留。<br>创建一个k记录遍历的位置，每次比较nums[k]与nums[i]的位置元素的大小，如果当前的nums[i]大于nums[k]，则将k位置向后移动1，并将下一个位置记录为nums[i]。</p><p>最后返回k+1。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[k] &lt; nums[i])&#123;</span><br><span class="line">                k++;</span><br><span class="line">                nums[k] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h3&gt;&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/code&gt; sorte</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://xuanhe95.github.io/categories/LeetCode/"/>
    
    <category term="Easy" scheme="https://xuanhe95.github.io/categories/LeetCode/Easy/"/>
    
    
    <category term="每日一题" scheme="https://xuanhe95.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="Array" scheme="https://xuanhe95.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Recursive Relation, LHRC, Honoi Tower</title>
    <link href="https://xuanhe95.github.io/2022/11/06/Recursive-Relation-LHRC-Honoi-Tower/"/>
    <id>https://xuanhe95.github.io/2022/11/06/Recursive-Relation-LHRC-Honoi-Tower/</id>
    <published>2022-11-07T00:37:49.000Z</published>
    <updated>2022-11-07T01:02:50.459Z</updated>
    
    <content type="html"><![CDATA[<p>Find <strong>closed formula</strong> for an.</p><ol><li>Iteration (Proof by Induction)</li><li>Linear homogeneous recursive relation with constant coefficiens (LHRC)<br>find the roots of equation t<sub>2</sub>+c<sub>1</sub>t+C<sub>2</sub><br>then where exist constants b, d such that a<sub>n</sub> &#x3D; br<sub>1</sub><sup>n</sup>+dr<sub>2</sub><sup>n</sup>, for n &gt;&#x3D; 0</li></ol><p>Recursive Relation, Honoi Tower, LHRC</p><iframe src="https://www.slideshare.net/slideshow/embed_code/key/GOe7gGuU9cKhsG?hostedIn=slideshare&page=upload" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe><iframe src="https://www.slideshare.net/ssuser3baeb8/61-week-4-notes-71pdf" style="width:100%;height:550px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Find &lt;strong&gt;closed formula&lt;/strong&gt; for an.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Iteration (Proof by Induction)&lt;/li&gt;
&lt;li&gt;Linear homogeneous recursive relation w</summary>
      
    
    
    
    <category term="Course" scheme="https://xuanhe95.github.io/categories/Course/"/>
    
    <category term="Math" scheme="https://xuanhe95.github.io/categories/Course/Math/"/>
    
    
  </entry>
  
  <entry>
    <title>1578. Minimum Time to Make Rope Colorful</title>
    <link href="https://xuanhe95.github.io/2022/10/03/1578-Minimum-Time-to-Make-Rope-Colorful/"/>
    <id>https://xuanhe95.github.io/2022/10/03/1578-Minimum-Time-to-Make-Rope-Colorful/</id>
    <published>2022-10-03T23:59:07.000Z</published>
    <updated>2022-10-03T23:59:26.415Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Alice has <code>n</code> balloons arranged on a rope. You are given a <strong>0-indexed</strong> string <code>colors</code> where <code>colors[i]</code> is the color of the <code>i&lt;sup&gt;th&lt;/sup&gt;</code> balloon.</p><p>Alice wants the rope to be <strong>colorful</strong>. She does not want <strong>two consecutive balloons</strong> to be of the same color, so she asks Bob for help. Bob can remove some balloons from the rope to make it <strong>colorful</strong>. You are given a <strong>0-indexed</strong> integer array <code>neededTime</code> where <code>neededTime[i]</code> is the time (in seconds) that Bob needs to remove the <code>i&lt;sup&gt;th&lt;/sup&gt;</code> balloon from the rope.</p><p>Return <em>the <strong>minimum time</strong> Bob needs to make the rope <strong>colorful</strong></em>.</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>滑动窗口，遍历字符串。<br>common用来记录连续颜色相同的个数，初始化为1。<br>如果当前字符与下一个字符相同，则窗口向右侧扩展，common++。<br>遍历时记录替换气球需要的最大时间maxTime和替换掉所有同色气球的总时间deleteTime。</p><p>如果common大于1，则总时间加上需要删除的时间（刨除最大时间maxTime）。<br>更新i为i + common。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCost</span><span class="params">(String colors, <span class="type">int</span>[] neededTime)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, totalTime = <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span>[] c = colors.toCharArray();</span><br><span class="line">        <span class="keyword">while</span>(i &lt; neededTime.length)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">common</span> <span class="operator">=</span> <span class="number">1</span>, maxTime = neededTime[i], deleteTime = neededTime[i];</span><br><span class="line">            <span class="keyword">while</span>(i + common &lt; neededTime.length &amp;&amp; c[i] == c[i + common])&#123;</span><br><span class="line">                maxTime = Math.max(maxTime, neededTime[i + common]);</span><br><span class="line">                deleteTime += neededTime[i + common];</span><br><span class="line">                common++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(common &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                deleteTime -= maxTime;</span><br><span class="line">                totalTime += deleteTime;</span><br><span class="line">            &#125;</span><br><span class="line">            i += common;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> totalTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h3&gt;&lt;p&gt;Alice has &lt;code&gt;n&lt;/code&gt; balloons arranged on a ro</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://xuanhe95.github.io/categories/LeetCode/"/>
    
    <category term="Medium" scheme="https://xuanhe95.github.io/categories/LeetCode/Medium/"/>
    
    
    <category term="每日一题" scheme="https://xuanhe95.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="滑动窗口" scheme="https://xuanhe95.github.io/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>609. Find Duplicate File in System</title>
    <link href="https://xuanhe95.github.io/2022/09/19/609-Find-Duplicate-File-in-System/"/>
    <id>https://xuanhe95.github.io/2022/09/19/609-Find-Duplicate-File-in-System/</id>
    <published>2022-09-19T20:37:22.000Z</published>
    <updated>2022-09-19T20:37:22.546Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>Given a list <code>paths</code> of directory info, including the directory path, and all the files with contents in this directory, return <em>all the duplicate files in the file system in terms of their paths</em>. You may return the answer in <strong>any order</strong>.</p><p>A group of duplicate files consists of at least two files that have the same content.</p><p>A single directory info string in the input list has the following format:</p><ul><li><code>&quot;root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)&quot;</code></li></ul><p>It means there are <code>n</code> files <code>(f1.txt, f2.txt ... fn.txt)</code> with content <code>(f1_content, f2_content ... fn_content)</code> respectively in the directory “<code>root/d1/d2/.../dm&quot;</code>. Note that <code>n &gt;= 1</code> and <code>m &gt;= 0</code>. If <code>m = 0</code>, it means the directory is just the root directory.</p><p>The output is a list of groups of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:</p><ul><li><code>&quot;directory_path/file_name.txt&quot;</code></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>使用StringBuffer对字符串进行处理。<br>采用HashMap建立内容和对应列表的映射。</p><p>遍历处理字符串，并添加到map中。<br>最后遍历map，如果对应的列表size大于1，则加入结果。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">findDuplicate</span><span class="params">(String[] paths)</span> &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        HashMap&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(String path : paths)&#123;</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">folder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(path.charAt(i) != <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                folder.append(path.charAt(i));</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; path.length())&#123;</span><br><span class="line">                <span class="keyword">while</span>(path.charAt(i) == <span class="string">&#x27; &#x27;</span>) i++;</span><br><span class="line">                <span class="type">StringBuffer</span> <span class="variable">filename</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">                <span class="keyword">while</span>(i &lt; path.length() &amp;&amp; path.charAt(i) != <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                    filename.append(path.charAt(i));</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">StringBuffer</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">                <span class="keyword">while</span>(i &lt; path.length() &amp;&amp; path.charAt(i) != <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                    content.append(path.charAt(i));</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">                List&lt;String&gt; arr = map.getOrDefault(content.toString(), <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;());</span><br><span class="line">                arr.add(folder.toString() + <span class="string">&#x27;/&#x27;</span> + filename);</span><br><span class="line">                map.put(content.toString(), arr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(String content : map.keySet())&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.get(content).size() &gt; <span class="number">1</span>) res.add(map.get(content));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h3&gt;&lt;p&gt;Given a list &lt;code&gt;paths&lt;/code&gt; of directory i</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://xuanhe95.github.io/categories/LeetCode/"/>
    
    <category term="Medium" scheme="https://xuanhe95.github.io/categories/LeetCode/Medium/"/>
    
    
    <category term="每日一题" scheme="https://xuanhe95.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="String" scheme="https://xuanhe95.github.io/tags/String/"/>
    
    <category term="HashMap" scheme="https://xuanhe95.github.io/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>42. Trapping Rain Water</title>
    <link href="https://xuanhe95.github.io/2022/09/18/42-Trapping-Rain-Water/"/>
    <id>https://xuanhe95.github.io/2022/09/18/42-Trapping-Rain-Water/</id>
    <published>2022-09-18T08:17:09.000Z</published>
    <updated>2022-09-18T08:19:35.019Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>Given <code>n</code> non-negative integers representing an elevation map where the width of each bar is <code>1</code>, compute how much water it can trap after raining.</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>双指针，设置当前左侧的最大高度left和右侧的最大高度right。</p><p>分别从两侧遍历height[]数组，当出现更高的height时更新left和right。<br>否则记录left和right与height[i]的差值，并记录在数组waterLeft[]和waterRight[]中。</p><p>遍历两个数组，添加两者中的最小值到volume。</p><p>*由于单个参数只记录了一侧的最大值，因此最大值另一侧的水的体积会被多计算，因此分别从两侧遍历来获得最小值。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> height.length, left = <span class="number">0</span>, right = <span class="number">0</span>, volume = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] waterLeft = <span class="keyword">new</span> <span class="title class_">int</span>[n], waterRight = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(left &lt;= height[i]) left = height[i];</span><br><span class="line">            <span class="keyword">else</span> waterLeft[i] = left - height[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(right &lt;= height[i]) right = height[i];</span><br><span class="line">            <span class="keyword">else</span> waterRight[i] = right - height[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            volume += Math.min(waterLeft[i], waterRight[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> volume;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h3&gt;&lt;p&gt;Given &lt;code&gt;n&lt;/code&gt; non-negative integers rep</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://xuanhe95.github.io/categories/LeetCode/"/>
    
    <category term="Hard" scheme="https://xuanhe95.github.io/categories/LeetCode/Hard/"/>
    
    
    <category term="每日一题" scheme="https://xuanhe95.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="双指针" scheme="https://xuanhe95.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    <category term="Eureka!" scheme="https://xuanhe95.github.io/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>1770. Max Score from Multiplication Operations</title>
    <link href="https://xuanhe95.github.io/2022/09/16/1770-Max-Score-from-Multiplication-Operations/"/>
    <id>https://xuanhe95.github.io/2022/09/16/1770-Max-Score-from-Multiplication-Operations/</id>
    <published>2022-09-16T09:19:34.000Z</published>
    <updated>2022-09-16T09:26:57.326Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>You are given two integer arrays <code>nums</code> and <code>multipliers</code>** **of size <code>n</code> and <code>m</code> respectively, where <code>n &gt;= m</code>. The arrays are <strong>1-indexed</strong>.</p><p>You begin with a score of <code>0</code>. You want to perform <strong>exactly</strong> <code>m</code> operations. On the <code>i&lt;sup&gt;th&lt;/sup&gt;</code> operation <strong>(1-indexed)</strong>, you will:</p><ul><li>Choose one integer <code>x</code> from **either the start or the end **of the array <code>nums</code>.</li><li>Add <code>multipliers[i] * x</code> to your score.</li><li>Remove <code>x</code> from the array <code>nums</code>.</li></ul><p>Return *the <strong>maximum</strong> score after performing *<code>m</code> <em>operations.</em></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>动态规划，dp[][]数组记录左边取的个数和右边取的个数。</p><p>从取1开始到取multipliers的长度位置开始遍历。<br>然后从left取0个开始，直到left取i个为止遍历。<br>计算对应的right指针位置。</p><p>注意访问数组时需要访问left和right的上一个位置。</p><p>如果left为0，则只能取右侧的上一个位置加上右侧的上一个数值乘以mul。<br>如果right为0，则只能取左侧的上一个位置加上左侧的上一个数值乘以mul。<br>否则取两者之间的最大值。</p><p>最后遍历数组中left + right和为m的位置，并返回最大值。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumScore</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span>[] multipliers)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length, m = multipliers.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m+<span class="number">1</span>][m+<span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mul</span> <span class="operator">=</span> multipliers[i-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>; l &lt;= i; l++)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> i - l;</span><br><span class="line">                <span class="type">int</span> <span class="variable">iL</span> <span class="operator">=</span> l - <span class="number">1</span>, iR = n - r;</span><br><span class="line">                <span class="keyword">if</span>(l == <span class="number">0</span>) dp[l][r] = dp[l][r-<span class="number">1</span>] + mul * nums[iR];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(r == <span class="number">0</span>) dp[l][r] = dp[l-<span class="number">1</span>][r] + mul * nums[iL];</span><br><span class="line">                <span class="keyword">else</span> dp[l][r] = Math.max(dp[l-<span class="number">1</span>][r] + mul * nums[iL], dp[l][r-<span class="number">1</span>] + mul * nums[iR]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">1</span>; l &lt;= m; l++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> m - l;</span><br><span class="line">            ans = Math.max(ans, dp[l][r]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h3&gt;&lt;p&gt;You are given two integer arrays &lt;code&gt;nums&lt;/c</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://xuanhe95.github.io/categories/LeetCode/"/>
    
    <category term="Medium" scheme="https://xuanhe95.github.io/categories/LeetCode/Medium/"/>
    
    <category term="复习" scheme="https://xuanhe95.github.io/categories/LeetCode/Medium/%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="每日一题" scheme="https://xuanhe95.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="DP" scheme="https://xuanhe95.github.io/tags/DP/"/>
    
    <category term="Eureka!" scheme="https://xuanhe95.github.io/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>1457. Pseudo-Palindromic Paths in a Binary Tree</title>
    <link href="https://xuanhe95.github.io/2022/09/14/1457-Pseudo-Palindromic-Paths-in-a-Binary-Tree/"/>
    <id>https://xuanhe95.github.io/2022/09/14/1457-Pseudo-Palindromic-Paths-in-a-Binary-Tree/</id>
    <published>2022-09-14T09:26:41.000Z</published>
    <updated>2022-09-14T09:45:48.298Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><blockquote><p>Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be <strong>pseudo-palindromic</strong> if at least one permutation of the node values in the path is a palindrome.</p><p><em>Return the number of <strong>pseudo-palindromic</strong> paths going from the root node to leaf nodes.</em></p></blockquote><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>用数组bin[]记录一个树枝上的节点。</p><p>回溯，遇到根节点则判断数组bin[]中是否只有0个或1个奇数的数字。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> res;</span><br><span class="line">    <span class="type">int</span>[] bin;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pseudoPalindromicPaths</span> <span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        res = <span class="number">0</span>;</span><br><span class="line">        bin = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        backtrack(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            bin[root.val]++;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bin.length; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(flag &amp;&amp; (bin[i] &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">                    bin[root.val]--;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>((bin[i] &amp; <span class="number">1</span>) == <span class="number">1</span>) flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res++;</span><br><span class="line">            bin[root.val]--;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        bin[root.val]++;</span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="literal">null</span>) backtrack(root.left);</span><br><span class="line">        <span class="keyword">if</span>(root.right != <span class="literal">null</span>) backtrack(root.right);</span><br><span class="line">        bin[root.val]--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a binary tree where node va</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://xuanhe95.github.io/categories/LeetCode/"/>
    
    <category term="Medium" scheme="https://xuanhe95.github.io/categories/LeetCode/Medium/"/>
    
    
    <category term="每日一题" scheme="https://xuanhe95.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="Binary Tree" scheme="https://xuanhe95.github.io/tags/Binary-Tree/"/>
    
    <category term="Backtracking" scheme="https://xuanhe95.github.io/tags/Backtracking/"/>
    
    <category term="DFS" scheme="https://xuanhe95.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>393. UTF-8 Validation</title>
    <link href="https://xuanhe95.github.io/2022/09/14/393-UTF-8-Validation/"/>
    <id>https://xuanhe95.github.io/2022/09/14/393-UTF-8-Validation/</id>
    <published>2022-09-14T08:56:02.000Z</published>
    <updated>2022-09-14T09:45:37.820Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><blockquote><p>Given an integer array <code>data</code> representing the data, return whether it is a valid <strong>UTF-8</strong> encoding (i.e. it translates to a sequence of valid UTF-8 encoded characters).</p><p>A character in <strong>UTF8</strong> can be from <strong>1 to 4 bytes</strong> long, subjected to the following rules:</p><ol><li>For a <strong>1-byte</strong> character, the first bit is a <code>0</code>, followed by its Unicode code.</li><li>For an <strong>n-bytes</strong> character, the first <code>n</code> bits are all one’s, the <code>n + 1</code> bit is <code>0</code>, followed by <code>n - 1</code> bytes with the most significant <code>2</code> bits being <code>10</code>.</li></ol><p><code>x</code> denotes a bit in the binary form of a byte that may be either <code>0</code> or <code>1</code>.</p><p>**Note: **The input is an array of integers. Only the <strong>least significant 8 bits</strong> of each integer is used to store the data. This means each integer represents only 1 byte of data.</p></blockquote><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>位运算，循环更新UTF头部的位置start。<br>getByte()方法用来计算位数。<br>check()方法用来检查从start+1开始直到位数结束是否二进制位数以10开头。<br>isStartWith10()方法使用掩码判断二进制是否以10开头。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dt;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MASK</span> <span class="operator">=</span> <span class="number">0b11000000</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validUtf8</span><span class="params">(<span class="type">int</span>[] data)</span> &#123;</span><br><span class="line">        dt = data;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(start &lt; data.length)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bit</span> <span class="operator">=</span> getByte(start);</span><br><span class="line">            <span class="keyword">if</span>(bit == -<span class="number">1</span> || start + bit &gt; data.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(!check(start, bit)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            start += bit;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getByte</span><span class="params">(<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bit</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((dt[start] &amp; <span class="number">1</span>) == <span class="number">0</span>) bit = <span class="number">7</span> - i;</span><br><span class="line">            dt[start] &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(bit == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(bit == <span class="number">1</span> || bit &gt; <span class="number">4</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> bit;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> bit)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start + <span class="number">1</span>; i &lt; start + bit; i++) <span class="keyword">if</span>(!isStartWith10(dt[i])) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isStartWith10</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (num &amp; MASK) == <span class="number">0b10000000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given an integer array &lt;code&gt;data</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://xuanhe95.github.io/categories/LeetCode/"/>
    
    <category term="Medium" scheme="https://xuanhe95.github.io/categories/LeetCode/Medium/"/>
    
    
    <category term="每日一题" scheme="https://xuanhe95.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="位运算" scheme="https://xuanhe95.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>1383. Maximum Performance of a Team</title>
    <link href="https://xuanhe95.github.io/2022/09/11/1383-Maximum-Performance-of-a-Team/"/>
    <id>https://xuanhe95.github.io/2022/09/11/1383-Maximum-Performance-of-a-Team/</id>
    <published>2022-09-11T20:40:33.000Z</published>
    <updated>2022-09-11T20:40:50.021Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><blockquote><p>You are given two integers <code>n</code> and <code>k</code> and two integer arrays <code>speed</code> and <code>efficiency</code> both of length <code>n</code>. There are <code>n</code> engineers numbered from <code>1</code> to <code>n</code>. <code>speed[i]</code> and <code>efficiency[i]</code> represent the speed and efficiency of the <code>i&lt;sup&gt;th&lt;/sup&gt;</code> engineer respectively.</p><p>Choose <strong>at most</strong> <code>k</code> different engineers out of the <code>n</code> engineers to form a team with the maximum <strong>performance</strong>.</p><p>The performance of a team is the sum of their engineers’ speeds multiplied by the minimum efficiency among their engineers.</p><p>Return <em>the maximum performance of this team</em>. Since the answer can be a huge number, return it <strong>modulo</strong> <code>10&lt;sup&gt;9&lt;/sup&gt;&lt;span&gt; &lt;/span&gt;+ 7</code>.</p></blockquote><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>排序，将所有工程师根据其效率降序排列。</p><p>此时遍历时后一个工程师的效率一定小于等于前一个工程师。</p><p>因此，此时遍历到每一个工程师，其前面所有的工程师的efficiency均大于等于其本身。<br>维护一个所有选取工程师的总速度ttSpd，每次计算并更新max的值。<br>用最小堆来维护选取的工程师速度，如果优先级队列的尺寸超过k-1，则poll掉队列内最低的速度。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxPerformance</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[] speed, <span class="type">int</span>[] efficiency, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">mod</span> <span class="operator">=</span> (<span class="type">int</span>) Math.pow(<span class="number">10</span>, <span class="number">9</span>) + <span class="number">7</span>;</span><br><span class="line">        <span class="type">int</span>[][] engineer = <span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">2</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            engineer[i][<span class="number">0</span>] = speed[i];</span><br><span class="line">            engineer[i][<span class="number">1</span>] = efficiency[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(engineer, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span>[] b)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> b[<span class="number">1</span>] - a[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>, ttSpd = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        PriorityQueue&lt;Integer&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> engineer[i][<span class="number">0</span>], e = engineer[i][<span class="number">1</span>];</span><br><span class="line">            ttSpd += s;</span><br><span class="line">            max = Math.max(max, ttSpd * e);</span><br><span class="line">            pq.add(s);</span><br><span class="line">            <span class="keyword">if</span>(pq.size() == k) ttSpd -= pq.poll();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (max % mod);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;You are given two integers &lt;code&gt;</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://xuanhe95.github.io/categories/LeetCode/"/>
    
    <category term="Hard" scheme="https://xuanhe95.github.io/categories/LeetCode/Hard/"/>
    
    <category term="复习" scheme="https://xuanhe95.github.io/categories/LeetCode/Hard/%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="每日一题" scheme="https://xuanhe95.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="Sort" scheme="https://xuanhe95.github.io/tags/Sort/"/>
    
    <category term="Eureka!" scheme="https://xuanhe95.github.io/tags/Eureka/"/>
    
    <category term="双参数" scheme="https://xuanhe95.github.io/tags/%E5%8F%8C%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>1996. The Number of Weak Characters in the Game</title>
    <link href="https://xuanhe95.github.io/2022/09/11/1996-The-Number-of-Weak-Characters-in-the-Game/"/>
    <id>https://xuanhe95.github.io/2022/09/11/1996-The-Number-of-Weak-Characters-in-the-Game/</id>
    <published>2022-09-11T20:06:48.000Z</published>
    <updated>2022-09-11T20:09:24.422Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><blockquote><p>You are playing a game that contains multiple characters, and each of the characters has <strong>two</strong> main properties: <strong>attack</strong> and <strong>defense</strong>. You are given a 2D integer array <code>properties</code> where <code>properties[i] = [attack&lt;sub&gt;i&lt;/sub&gt;, defense&lt;sub&gt;i&lt;/sub&gt;]</code> represents the properties of the <code>i&lt;sup&gt;th&lt;/sup&gt;</code> character in the game.</p><p>A character is said to be <strong>weak</strong> if any other character has <strong>both</strong> attack and defense levels <strong>strictly greater</strong> than this character’s attack and defense levels. More formally, a character <code>i</code> is said to be <strong>weak</strong> if there exists another character <code>j</code> where <code>attack&lt;sub&gt;j&lt;/sub&gt;&lt;span&gt; &lt;/span&gt;&gt; attack&lt;sub&gt;i&lt;/sub&gt;</code> and <code>defense&lt;sub&gt;j&lt;/sub&gt;&lt;span&gt; &lt;/span&gt;&gt; defense&lt;sub&gt;i&lt;/sub&gt;</code>.</p><p>Return <em>the number of <strong>weak</strong> characters</em>.</p></blockquote><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>本题与<a href="https://xuanhe95.github.io/2022/05/25/354-Russian-Doll-Envelopes/">354. Russian Doll Envelopes</a>相近。</p><p>首先对数组进行排序，根据角色的attack数值<strong>降序</strong>排序，如果两者的attack数值相等，则根据两者的defence<strong>升序</strong>排序。</p><p>记录一个遍历过的最大defence数值maxDefence，遍历数组，如果当前maxDef大于角色的防御值，则此时当前遍历角色的attack与defence均严格小于上一个计算的角色，因此count加一。<br>否则更新maxDef。</p><p>*由于attack是降序的，因此可以确定遍历时下一组数组的attack一定更弱。（由于相同attack的角色是根据defence升序排列，因此记录maxDef时会逐个更新maxDef的值。）</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numberOfWeakCharacters</span><span class="params">(<span class="type">int</span>[][] properties)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>, maxDef = Integer.MIN_VALUE;</span><br><span class="line">            </span><br><span class="line">        Arrays.sort(properties, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span>[] b)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[<span class="number">0</span>] == b[<span class="number">0</span>]) <span class="keyword">return</span> a[<span class="number">1</span>] - b[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">return</span> b[<span class="number">0</span>] - a[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span>[] character : properties)&#123;</span><br><span class="line">            <span class="keyword">if</span>(maxDef &gt; character[<span class="number">1</span>]) count++;</span><br><span class="line">            <span class="keyword">else</span> maxDef = character[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;You are playing a game that conta</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://xuanhe95.github.io/categories/LeetCode/"/>
    
    <category term="Medium" scheme="https://xuanhe95.github.io/categories/LeetCode/Medium/"/>
    
    <category term="复习" scheme="https://xuanhe95.github.io/categories/LeetCode/Medium/%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="每日一题" scheme="https://xuanhe95.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="Sort" scheme="https://xuanhe95.github.io/tags/Sort/"/>
    
    <category term="双参量" scheme="https://xuanhe95.github.io/tags/%E5%8F%8C%E5%8F%82%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>606. Construct String from Binary Tree</title>
    <link href="https://xuanhe95.github.io/2022/09/06/606-Construct-String-from-Binary-Tree/"/>
    <id>https://xuanhe95.github.io/2022/09/06/606-Construct-String-from-Binary-Tree/</id>
    <published>2022-09-07T06:00:42.000Z</published>
    <updated>2022-09-07T06:01:02.759Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><blockquote><p>Given the <code>root</code> of a binary tree, construct a string consisting of parenthesis and integers from a binary tree with the preorder traversal way, and return it.</p><p>Omit all the empty parenthesis pairs that do not affect the one-to-one mapping relationship between the string and the original binary tree.</p></blockquote><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>DFS搜索，先序遍历到每个节点将其加入StringBuffer。<br>如果当前节点有左子节点或右子节点，则递归左子节点，并在前后添加一对括号。（如果有右子节点的情况即使左子节点为空也需要添加一对括号加以区别。）<br>如果当前节点有右子节点，则递归右子节点，并在前后添加一对括号。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    StringBuffer sb;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">tree2str</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        sb = <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        sb.append(root.val);</span><br><span class="line">        </span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasLeft</span> <span class="operator">=</span> root.left != <span class="literal">null</span>, hasRight = root.right != <span class="literal">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(hasLeft || hasRight) sb.append(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">        dfs(root.left);</span><br><span class="line">        <span class="keyword">if</span>(hasLeft || hasRight) sb.append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(hasRight) sb.append(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">        dfs(root.right);</span><br><span class="line">        <span class="keyword">if</span>(hasRight) sb.append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given the &lt;code&gt;root&lt;/code&gt; of a </summary>
      
    
    
    
    <category term="LeetCode" scheme="https://xuanhe95.github.io/categories/LeetCode/"/>
    
    <category term="Easy" scheme="https://xuanhe95.github.io/categories/LeetCode/Easy/"/>
    
    
    <category term="每日一题" scheme="https://xuanhe95.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="Binary Tree" scheme="https://xuanhe95.github.io/tags/Binary-Tree/"/>
    
    <category term="DFS" scheme="https://xuanhe95.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>814. Binary Tree Pruning</title>
    <link href="https://xuanhe95.github.io/2022/09/06/814-Binary-Tree-Pruning/"/>
    <id>https://xuanhe95.github.io/2022/09/06/814-Binary-Tree-Pruning/</id>
    <published>2022-09-06T07:02:45.000Z</published>
    <updated>2022-09-06T08:40:51.778Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><blockquote><p>Given the <code>root</code> of a binary tree, return <em>the same tree where every subtree (of the given tree) not containing a <em><code>1</code></em> has been removed</em>.</p><p>A subtree of a node <code>node</code> is <code>node</code> plus every node that is a descendant of <code>node</code>.</p></blockquote><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><p>DFS搜索，首先递归两个子节点。<br>在搜索时如果节点为0且两个子节点均为null，则返回null。否则返回节点本身。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">pruneTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        root.left = pruneTree(root.left);</span><br><span class="line">        root.right = pruneTree(root.right);</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span> &amp;&amp; root.val == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h3><p>DFS搜索，返回子节点和自己中是否包含1。<br>如果节点为null，则返回false。<br>如果自己为1，则返回true。<br>否则返回两个子节点中是否有true。</p><p>BFS搜索，根据每个节点的子节点是否包含1来决定左右子节点是否保存。<br>如果没有1，则将对应的子节点修改为null。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">pruneTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!hasOne(root)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        q.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">curr</span> <span class="operator">=</span> q.poll();</span><br><span class="line">            <span class="keyword">if</span>(hasOne(curr.left)) q.add(curr.left);</span><br><span class="line">            <span class="keyword">else</span> curr.left = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span>(hasOne(curr.right)) q.add(curr.right);</span><br><span class="line">            <span class="keyword">else</span> curr.right = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">hasOne</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.val == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> hasOne(root.left) || hasOne(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given the &lt;code&gt;root&lt;/code&gt; of a </summary>
      
    
    
    
    <category term="LeetCode" scheme="https://xuanhe95.github.io/categories/LeetCode/"/>
    
    <category term="Medium" scheme="https://xuanhe95.github.io/categories/LeetCode/Medium/"/>
    
    
    <category term="每日一题" scheme="https://xuanhe95.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="Binary Tree" scheme="https://xuanhe95.github.io/tags/Binary-Tree/"/>
    
    <category term="BFS" scheme="https://xuanhe95.github.io/tags/BFS/"/>
    
    <category term="DFS" scheme="https://xuanhe95.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>429. N-ary Tree Level Order Traversal</title>
    <link href="https://xuanhe95.github.io/2022/09/04/429-N-ary-Tree-Level-Order-Traversal/"/>
    <id>https://xuanhe95.github.io/2022/09/04/429-N-ary-Tree-Level-Order-Traversal/</id>
    <published>2022-09-05T03:48:03.000Z</published>
    <updated>2022-09-05T03:48:21.719Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><blockquote><p>Given an n-ary tree, return the <em>level order</em> traversal of its nodes’ values.</p><p><em>Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).</em></p></blockquote><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>BFS搜索，层序遍历。<br>用level记录上一层的个数。<br>当队列不为空时，每次挤出level个节点，并将其子节点加入队列。<br>将当前层次的节点值加入列表。<br>最后更新level的数量。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public List&lt;Node&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val, List&lt;Node&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Queue&lt;Node&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        q.add(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">level</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            List&lt;Integer&gt; arr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; level; i++)&#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">curr</span> <span class="operator">=</span> q.poll();</span><br><span class="line">                <span class="keyword">for</span>(Node child : curr.children)&#123;</span><br><span class="line">                    q.offer(child);</span><br><span class="line">                &#125;</span><br><span class="line">                arr.add(curr.val);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(arr);</span><br><span class="line">            level = q.size();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given an n-ary tree, return the &lt;</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://xuanhe95.github.io/categories/LeetCode/"/>
    
    <category term="Medium" scheme="https://xuanhe95.github.io/categories/LeetCode/Medium/"/>
    
    
    <category term="每日一题" scheme="https://xuanhe95.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="BFS" scheme="https://xuanhe95.github.io/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>967. Numbers With Same Consecutive Differences</title>
    <link href="https://xuanhe95.github.io/2022/09/02/967-Numbers-With-Same-Consecutive-Differences/"/>
    <id>https://xuanhe95.github.io/2022/09/02/967-Numbers-With-Same-Consecutive-Differences/</id>
    <published>2022-09-03T02:45:38.000Z</published>
    <updated>2022-09-03T02:46:04.439Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><blockquote><p>Return all <strong>non-negative</strong> integers of length <code>n</code> such that the absolute difference between every two consecutive digits is <code>k</code>.</p><p>Note that <strong>every</strong> number in the answer <strong>must not</strong> have leading zeros. For example, <code>01</code> has one leading zero and is invalid.</p><p>You may return the answer in <strong>any order</strong>.</p></blockquote><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>回溯，每次传入上一个数字和剩余的位数。<br>全局变量sum记录加和。<br>DFS搜索，每次计算下一位的可行数字并递归。<br>用回溯维护sum的值。<br>如果剩余位数为1，则将当前的sum加入结果，并清零sum。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; res;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] numsSameConsecDiff(<span class="type">int</span> n, <span class="type">int</span> k) &#123;</span><br><span class="line">        res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            dfs(i, n, k);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] ret = <span class="keyword">new</span> <span class="title class_">int</span>[res.size()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; res.size(); i++)&#123;</span><br><span class="line">            ret[i] = res.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> prev, <span class="type">int</span> n, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">        sum += prev;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            res.add(sum);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">0</span>)&#123;</span><br><span class="line">            sum *= <span class="number">10</span>;</span><br><span class="line">            dfs(prev + k, n-<span class="number">1</span>, k);</span><br><span class="line">            sum /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(prev + k &lt; <span class="number">10</span>)&#123;</span><br><span class="line">            sum *= <span class="number">10</span>;</span><br><span class="line">            dfs(prev + k, n-<span class="number">1</span>, k);</span><br><span class="line">            sum /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(prev &gt;= k)&#123;</span><br><span class="line">            sum *= <span class="number">10</span>;</span><br><span class="line">            dfs(prev - k, n-<span class="number">1</span>, k);</span><br><span class="line">            sum /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Return all &lt;strong&gt;non-negative&lt;/</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://xuanhe95.github.io/categories/LeetCode/"/>
    
    <category term="Medium" scheme="https://xuanhe95.github.io/categories/LeetCode/Medium/"/>
    
    
    <category term="每日一题" scheme="https://xuanhe95.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="Backtracking" scheme="https://xuanhe95.github.io/tags/Backtracking/"/>
    
    <category term="DFS" scheme="https://xuanhe95.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>637. Average of Levels in Binary Tree</title>
    <link href="https://xuanhe95.github.io/2022/09/02/637-Average-of-Levels-in-Binary-Tree/"/>
    <id>https://xuanhe95.github.io/2022/09/02/637-Average-of-Levels-in-Binary-Tree/</id>
    <published>2022-09-02T09:14:02.000Z</published>
    <updated>2022-09-02T09:14:29.378Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><blockquote><p>Given the <code>root</code> of a binary tree, return <em>the average value of the nodes on each level in the form of an array</em>. Answers within <code>10&lt;sup&gt;-5&lt;/sup&gt;</code> of the actual answer will be accepted.</p></blockquote><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>BFS搜索，记录单层的总和sum和单层的个数count。<br>每次遍历一个层级的所有节点，并更新sum和count。<br>遍历完毕后将当层级的平均数加入列表，同时将sum和count清零。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Double&gt; <span class="title function_">averageOfLevels</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Double&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">level</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        q.add(root);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; level; i++)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">curr</span> <span class="operator">=</span> q.poll();</span><br><span class="line">                <span class="keyword">if</span>(curr.left != <span class="literal">null</span>) q.add(curr.left);</span><br><span class="line">                <span class="keyword">if</span>(curr.right != <span class="literal">null</span>) q.add(curr.right);</span><br><span class="line">                count++;</span><br><span class="line">                sum += curr.val;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(sum/count);</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line">            level = q.size();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given the &lt;code&gt;root&lt;/code&gt; of a </summary>
      
    
    
    
    <category term="LeetCode" scheme="https://xuanhe95.github.io/categories/LeetCode/"/>
    
    <category term="Esay" scheme="https://xuanhe95.github.io/categories/LeetCode/Esay/"/>
    
    
    <category term="每日一题" scheme="https://xuanhe95.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://xuanhe95.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="Binary Tree" scheme="https://xuanhe95.github.io/tags/Binary-Tree/"/>
    
    <category term="BFS" scheme="https://xuanhe95.github.io/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>1448. Count Good Nodes in Binary Tree</title>
    <link href="https://xuanhe95.github.io/2022/09/01/1448-Count-Good-Nodes-in-Binary-Tree/"/>
    <id>https://xuanhe95.github.io/2022/09/01/1448-Count-Good-Nodes-in-Binary-Tree/</id>
    <published>2022-09-01T22:02:52.000Z</published>
    <updated>2022-09-01T22:03:12.404Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><blockquote><p>Given a binary tree <code>root</code>, a node <em>X</em> in the tree is named <strong>good</strong> if in the path from root to <em>X</em> there are no nodes with a value <em>greater than</em> X.</p><p>Return the number of <strong>good</strong> nodes in the binary tree.</p></blockquote><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>DFS搜索，每次传入当前分支的最大值。<br>如果当前值大于等于最大值，则count+1。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">goodNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        dfs(root, Integer.MIN_VALUE);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, <span class="type">int</span> max)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.val &gt;= max)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            max = root.val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dfs(root.left, max);</span><br><span class="line">        dfs(root.right, max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a binary tree &lt;code&gt;root&lt;/c</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://xuanhe95.github.io/categories/LeetCode/"/>
    
    <category term="Medium" scheme="https://xuanhe95.github.io/categories/LeetCode/Medium/"/>
    
    
    <category term="每日一题" scheme="https://xuanhe95.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://xuanhe95.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="DFS" scheme="https://xuanhe95.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>1329. Sort the Matrix Diagonally</title>
    <link href="https://xuanhe95.github.io/2022/08/27/1329-Sort-the-Matrix-Diagonally/"/>
    <id>https://xuanhe95.github.io/2022/08/27/1329-Sort-the-Matrix-Diagonally/</id>
    <published>2022-08-28T04:33:28.000Z</published>
    <updated>2022-08-28T04:33:45.218Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><blockquote><p>A <strong>matrix diagonal</strong> is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix’s end. For example, the <strong>matrix diagonal</strong> starting from <code>mat[2][0]</code>, where <code>mat</code> is a <code>6 x 3</code> matrix, includes cells <code>mat[2][0]</code>, <code>mat[3][1]</code>, and <code>mat[4][2]</code>.</p><p>Given an <code>m x n</code> matrix <code>mat</code> of integers, sort each <strong>matrix diagonal</strong> in ascending order and return <em>the resulting matrix</em>.</p></blockquote><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>分别遍历数组的两条边。<br>按对角线顺序进行遍历，用列表记录访问过的数字。<br>排序列表后按对角线填入原数组。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] diagonalSort(<span class="type">int</span>[][] mat) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> mat.length, n = mat[<span class="number">0</span>].length;</span><br><span class="line">        List&lt;Integer&gt; arr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>; t &lt; m; t++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> t, j = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(i &lt; m &amp;&amp; j &lt; n)&#123;</span><br><span class="line">                arr.add(mat[i][j]);</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            Collections.sort(arr);</span><br><span class="line">            </span><br><span class="line">            i = t;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(i &lt; m &amp;&amp; j &lt; n)&#123;</span><br><span class="line">                mat[i][j] = arr.get(j);</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            arr.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">1</span>; t &lt; n; t++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = t;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(i &lt; m &amp;&amp; j &lt; n)&#123;</span><br><span class="line">                arr.add(mat[i][j]);</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            Collections.sort(arr);</span><br><span class="line">            </span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">            j = t;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(i &lt; m &amp;&amp; j &lt; n)&#123;</span><br><span class="line">                mat[i][j] = arr.get(i);</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            arr.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;matrix diagonal&lt;/strong</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://xuanhe95.github.io/categories/LeetCode/"/>
    
    <category term="Medium" scheme="https://xuanhe95.github.io/categories/LeetCode/Medium/"/>
    
    
    <category term="每日一题" scheme="https://xuanhe95.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="Matrix" scheme="https://xuanhe95.github.io/tags/Matrix/"/>
    
  </entry>
  
  <entry>
    <title>363. Max Sum of Rectangle No Larger Than K</title>
    <link href="https://xuanhe95.github.io/2022/08/27/363-Max-Sum-of-Rectangle-No-Larger-Than-K/"/>
    <id>https://xuanhe95.github.io/2022/08/27/363-Max-Sum-of-Rectangle-No-Larger-Than-K/</id>
    <published>2022-08-27T09:17:36.000Z</published>
    <updated>2022-08-27T09:17:55.023Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><blockquote><p>Given an <code>m x n</code> matrix <code>matrix</code> and an integer <code>k</code>, return <em>the max sum of a rectangle in the matrix such that its sum is no larger than</em> <code>k</code>.</p><p>It is <strong>guaranteed</strong> that there will be a rectangle with a sum no larger than <code>k</code>.</p></blockquote><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>前缀和，计算矩阵中每个位置对应的方形的和。<br>遍历方形的两个对角线上的点。<br>其面积等于大块加小块的面积减去两个长方形的面积。<br>如果面积有小于k的，则记录其最大值并返回。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSumSubmatrix</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> matrix.length, y = matrix[<span class="number">0</span>].length, max = Integer.MIN_VALUE;</span><br><span class="line">        <span class="type">int</span>[][] sum = <span class="keyword">new</span> <span class="title class_">int</span>[x+<span class="number">1</span>][y+<span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= x; i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= y; j++)&#123;</span><br><span class="line">                total += matrix[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">                sum[i][j] = sum[i-<span class="number">1</span>][j] + total;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= x; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= y; j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> i + <span class="number">1</span>; m &lt;= x; m++)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> j + <span class="number">1</span>; n &lt;= y; n++)&#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">area</span> <span class="operator">=</span> sum[m][n] + sum[i][j] - sum[m][j] - sum[i][n];</span><br><span class="line">                        <span class="keyword">if</span>(area &lt;= k) max = Math.max(max, area);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given an &lt;code&gt;m x n&lt;/code&gt; matri</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://xuanhe95.github.io/categories/LeetCode/"/>
    
    <category term="Hard" scheme="https://xuanhe95.github.io/categories/LeetCode/Hard/"/>
    
    <category term="复习" scheme="https://xuanhe95.github.io/categories/LeetCode/Hard/%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="每日一题" scheme="https://xuanhe95.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="前缀和" scheme="https://xuanhe95.github.io/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>869. Reordered Power of 2</title>
    <link href="https://xuanhe95.github.io/2022/08/26/869-Reordered-Power-of-2/"/>
    <id>https://xuanhe95.github.io/2022/08/26/869-Reordered-Power-of-2/</id>
    <published>2022-08-26T08:13:15.000Z</published>
    <updated>2022-08-26T08:13:33.053Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><blockquote><p>You are given an integer <code>n</code>. We reorder the digits in any order (including the original order) such that the leading digit is not zero.</p><p>Return <code>true</code> <em>if and only if we can do this so that the resulting number is a power of two</em>.</p></blockquote><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>打表，将所有二的指数全部计算出来，并用数组统计各个数字出现的频率。<br>然后同样统计n中各个数字出现的频率。</p><p>如果两者中有频率完全相同的情况，则返回true，反之返回false。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">reorderedPowerOf2</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] reorders = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">1</span>, digits = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n; i &gt; <span class="number">0</span>; i/=<span class="number">10</span>)&#123;</span><br><span class="line">            reorders[i % <span class="number">10</span>]++;</span><br><span class="line">            digits++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        List&lt;Integer[]&gt; powerOfTwo = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(m &gt; <span class="number">0</span> &amp;&amp; size &lt;= digits)&#123;</span><br><span class="line">            size = <span class="number">0</span>;</span><br><span class="line">            Integer[] bin = <span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">10</span>];</span><br><span class="line">            Arrays.fill(bin, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m; i &gt; <span class="number">0</span>; i/=<span class="number">10</span>)&#123;</span><br><span class="line">                size++;</span><br><span class="line">                bin[i % <span class="number">10</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(size == digits) powerOfTwo.add(bin);</span><br><span class="line">            m *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(Integer[] bin : powerOfTwo) <span class="keyword">if</span>(check(bin, reorders)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(Integer[] bin, <span class="type">int</span>[] reorders)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bin.length; i++) <span class="keyword">if</span>(bin[i] != reorders[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h3><p>回溯，遍历计算可以组成的所有数字。<br>打表记录所有二的指数并记录在哈希表内，如果所有组成数字中有哈希表内的数字则返回true，反之返回false。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    HashSet&lt;Integer&gt; visited, set, numbers;</span><br><span class="line">    List&lt;Integer&gt; arr, res;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">reorderedPowerOf2</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        visited = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        numbers = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">while</span>(m &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            set.add(m);</span><br><span class="line">            m *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        arr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            arr.add(n % <span class="number">10</span>);</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; arr.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr.get(i) == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            visited.add(i);</span><br><span class="line">            reorder(arr.get(i));</span><br><span class="line">            visited.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : res) <span class="keyword">if</span>(set.contains(num)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reorder</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(visited.size() == arr.size())&#123;</span><br><span class="line">            res.add(num);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(numbers.contains(num)) <span class="keyword">return</span>;</span><br><span class="line">        numbers.add(num);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(visited.contains(i)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> num * <span class="number">10</span> + arr.get(i);</span><br><span class="line">            visited.add(i);</span><br><span class="line">            reorder(next);</span><br><span class="line">            visited.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;You are given an integer &lt;code&gt;n&lt;</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://xuanhe95.github.io/categories/LeetCode/"/>
    
    <category term="Medium" scheme="https://xuanhe95.github.io/categories/LeetCode/Medium/"/>
    
    <category term="复习" scheme="https://xuanhe95.github.io/categories/LeetCode/Medium/%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="每日一题" scheme="https://xuanhe95.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="Hash Map" scheme="https://xuanhe95.github.io/tags/Hash-Map/"/>
    
    <category term="Eureka!" scheme="https://xuanhe95.github.io/tags/Eureka/"/>
    
    <category term="String" scheme="https://xuanhe95.github.io/tags/String/"/>
    
    <category term="Backtracking" scheme="https://xuanhe95.github.io/tags/Backtracking/"/>
    
  </entry>
  
</feed>
